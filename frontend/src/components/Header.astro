---
// src/components/ui/Header.astro
---

<!-- Header con Alpine.js para manejar el carrito -->
<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

<style>
  [x-cloak] { display: none !important; }
</style>

<header class="bg-white shadow-sm sticky top-0 z-40" x-data="headerComponent">
  <div class="container mx-auto px-4 py-3 flex justify-between items-center">
    <a href="/" class="text-2xl font-bold text-blue-600">StyleHub</a>
    <nav class="hidden md:flex space-x-6">
      <a href="/" class="hover:text-blue-500 transition">Inicio</a>
      <a href="/productos" class="font-semibold hover:text-blue-500 transition">Productos</a>
    </nav>
  </div>

  <!-- Icono flotante de carrito -->
  <div class="fixed bottom-6 right-6 z-50" x-cloak>
    <button
      type="button"
      @click="toggleCart()"
      class="bg-blue-600 text-white w-14 h-14 rounded-full shadow-2xl flex items-center justify-center text-xl hover:bg-blue-700 transition transform hover:scale-105 focus:outline-none"
    >
      üõí
      <span
        class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center"
        x-show="cart.length > 0"
        x-text="cart.length"
      ></span>
    </button>
  </div>

  <!-- Sidebar del carrito -->
  <div
    id="cart-sidebar"
    class="fixed inset-y-0 right-0 w-80 bg-white shadow-xl border-l z-50 transform transition-transform duration-300 ease-in-out"
    :class="{ 'translate-x-full': !isCartOpen }"
  >
    <div class="flex items-center justify-between p-4 border-b">
      <h3 class="text-lg font-semibold">Tu Carrito</h3>
      <button
        @click="toggleCart()"
        class="text-gray-500 hover:text-gray-700 focus:outline-none"
      >
        ‚úï
      </button>
    </div>
    <div id="cart-items" class="p-4 max-h-[calc(100vh-120px)] overflow-y-auto">
      <template x-if="cart.length === 0">
        <p class="text-gray-500 text-center py-4">Tu carrito est√° vac√≠o</p>
      </template>
      <template x-if="cart.length > 0">
        <ul class="space-y-3">
          <template x-for="(item, index) in cart" :key="item.id">
            <li class="flex gap-3 border-b pb-3">
              <img :src="item.imageUrl" :alt="item.title" class="w-16 h-16 object-cover rounded" />
              <div class="flex-1">
                <h4 class="font-semibold text-sm" x-text="item.title"></h4>
                <p class="text-blue-600 font-bold" x-text="`$${item.price.toFixed(2)}`"></p>
              </div>
              <button
                @click="removeFromCart(index)"
                class="text-red-500 hover:text-red-700 text-xl focus:outline-none"
                title="Eliminar del carrito"
              >
                üóëÔ∏è
              </button>
            </li>
          </template>
        </ul>
      </template>
    </div>
    <div class="p-4 border-t font-bold">
      Total: <span x-text="`$${cartTotal.toFixed(2)}`"></span>
    </div>
    <div class="p-4">
      <a
        href="/checkout"
        @click="toggleCart()"
        class="block text-center bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition"
        :class="{ 'opacity-50 cursor-not-allowed': cart.length === 0 }"
        :aria-disabled="cart.length === 0"
      >
        Ir al Checkout
      </a>
    </div>
  </div>
</header>

<script type="text/javascript">
  document.addEventListener('alpine:init', () => {
    Alpine.data('headerComponent', () => ({
      isCartOpen: false,
      cart: [],

      get cartTotal() {
        return this.cart.reduce((sum, item) => sum + item.price, 0);
      },

      toggleCart() {
        this.isCartOpen = !this.isCartOpen;
      },

      removeFromCart(index) {
        const item = this.cart[index];
        this.cart.splice(index, 1);
        this.cart = [...this.cart]; 
        alert(`${item.title} eliminado del carrito`);
      },

      init() {
        // Cargar carrito desde localStorage al iniciar
        const saved = localStorage.getItem('cart');
        if (saved) {
          this.cart = JSON.parse(saved);
        }

        // Escuchar cambios (ej. desde ProductCard)
        window.addEventListener('cart:update', (e) => {
          if (e.detail) {
            const { id, title, price, imageUrl } = e.detail;
            const exists = this.cart.find(item => item.id === id);
            if (!exists) {
              this.cart = [...this.cart, { id, title, price, imageUrl }];
              localStorage.setItem('cart', JSON.stringify(this.cart));
            }
          }
        });
      }
    }));
  });

  // Disparar evento global para a√±adir al carrito desde otros componentes
  window.addToCart = function(product) {
    window.dispatchEvent(new CustomEvent('cart:update', { detail: product }));
  };
</script>